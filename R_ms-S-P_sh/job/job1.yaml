apiVersion: batch/v1
kind: Job
metadata:
  name: data-checker
  namespace: client
spec:
  backoffLimit: 4
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: data-checker
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            # Update and install necessary packages
            echo "Updating and installing packages..."
            apk update
            apk add --no-cache postgresql-client redis jq

            # Check Redis connection
            echo "Checking Redis connection..."
            MASTER_INFO=$(redis-cli -h sentinel.redis-ns.svc.cluster.local -p 5000 sentinel get-master-addr-by-name mymaster)
            MASTER_IP=$(echo $MASTER_INFO | awk '{print $1}')
            MASTER_PORT=$(echo $MASTER_INFO | awk '{print $2}')
            echo "Redis master info: $MASTER_INFO"
            echo "Redis IP: $MASTER_IP, Port: $MASTER_PORT"

            # Check Redis connection
            redis-cli -h $MASTER_IP -p $MASTER_PORT PING || { echo "Failed to connect to Redis. Exiting."; exit 1; }
            echo "Redis connection successful."

            # Check PostgreSQL connection
            echo "Checking PostgreSQL connection..."
            PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h postgres.postgres-ns.svc.cluster.local -U postgres || { echo "Failed to connect to PostgreSQL. Exiting."; exit 1; }
            echo "PostgreSQL connection successful."

            # Use a modified list of IDs for testing
            echo "Fetching IDs from Redis..."
            IDS="1 10 4 105 99 71 103 17 90 108 6 86 70 96 32 98 80 91 102 200"  # Added 9999 to test MISS

            # Check each ID in Redis
            for ID in $IDS; do
              echo "Checking ID $ID in Redis..."
              DATA=$(redis-cli -h $MASTER_IP -p $MASTER_PORT -a $REDIS_PASSWORD GET $ID)
              if [ -z "$DATA" ]; then
                echo "Cache MISS for key: $ID. Fetching data from PostgreSQL."

                # Fetch the record from PostgreSQL
                RECORD=$(PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres.postgres-ns.svc.cluster.local -U postgres -d mydatabase -t -c "SELECT id, nome_articolo, size, price FROM articles WHERE id = $ID;")
                if [ -z "$RECORD" ]; then
                  echo "Record with ID $ID not found in PostgreSQL."
                else
                  # Format the record
                  ID=$(echo "$RECORD" | awk '{print $1}')
                  NOME_ARTICOLO=$(echo "$RECORD" | awk '{print $2}')
                  SIZE=$(echo "$RECORD" | awk '{print $3}')
                  PRICE=$(echo "$RECORD" | awk '{print $4}')
                  json_data=$(jq -n \
                    --arg id "$ID" \
                    --arg nome_articolo "$NOME_ARTICOLO" \
                    --arg size "$SIZE" \
                    --arg price "$PRICE" \
                    '{id: $id, nome_articolo: $nome_articolo, size: $size, price: $price}')
                  echo "Setting key: $ID with value: $json_data"
                  redis-cli -h $MASTER_IP -p $MASTER_PORT -a $REDIS_PASSWORD SET "$ID" "$json_data" || { echo "Failed to set key $ID in Redis. Exiting."; exit 1; }
                fi
              else
                echo "Cache HIT for key: $ID"
              fi
            done

            echo "Cache HIT/MISS processing completed."
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
